import re
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator
# Paste your data here as a multiline string
data_str2 = """
 8.71053e+007
4.68579e+007
1.28144e+008
2.22576e+008
 4.1329e+008
7.50908e+008
 1.3577e+009
2.43489e+009
4.33343e+009
7.65185e+009
1.34044e+010
2.32931e+010
4.01474e+010
6.86255e+010
1.16321e+011
 1.9549e+011
3.25703e+011
5.37891e+011
8.80396e+011
1.42793e+012
2.29465e+012
3.65285e+012
5.75943e+012
8.99249e+012
1.39011e+013
2.12718e+013
3.22143e+013
4.82712e+013
7.15518e+013
1.04891e+014
1.52031e+014
2.17811e+014
3.08365e+014
4.31281e+014
5.95718e+014
8.12412e+014
1.09356e+015
1.45252e+015
1.90327e+015
2.45969e+015
3.13464e+015
3.93884e+015
 4.8798e+015
5.96085e+015
7.18043e+015
8.53183e+015
1.00035e+016
  1.158e+016
1.32341e+016
1.48717e+016
1.64536e+016
1.79623e+016
1.93856e+016
2.07164e+016
2.19511e+016
2.30898e+016
2.41345e+016
2.50894e+016
2.59595e+016
2.67505e+016
2.74685e+016
2.81197e+016
2.87099e+016
2.92449e+016
  2.973e+016
3.01702e+016
  3.057e+016
3.09336e+016
3.12647e+016
3.15667e+016
3.18426e+016
3.20952e+016
3.23269e+016
3.25397e+016
3.27357e+016
3.29166e+016
3.30838e+016
3.32388e+016
3.33827e+016
3.35167e+016
3.36417e+016
3.37585e+016
3.38679e+016
3.39706e+016
3.40673e+016
3.41584e+016
3.42445e+016
 3.4326e+016
3.44033e+016
3.44767e+016
3.45467e+016
3.46135e+016
3.46773e+016
3.47384e+016
 3.4797e+016
3.48534e+016
3.49077e+016
  3.496e+016
3.50106e+016
3.50595e+016
3.51069e+016
3.51529e+016
3.51977e+016
3.52413e+016
3.52837e+016
3.53252e+016
3.53658e+016
3.54055e+016
3.54444e+016
3.54827e+016
3.55203e+016
3.55572e+016
3.55937e+016
3.56297e+016
3.56652e+016
3.57003e+016
3.57351e+016
3.57696e+016
3.58039e+016
3.58379e+016
3.58717e+016
3.59054e+016
3.59389e+016
3.59724e+016
3.60059e+016
3.60393e+016
3.60727e+016
3.61061e+016
3.61396e+016
3.61732e+016
3.62069e+016
3.62408e+016
3.62749e+016
3.63094e+016
3.63443e+016
3.63796e+016
3.64155e+016
 3.6452e+016
3.64893e+016
3.65273e+016
3.65663e+016
3.66063e+016
3.66474e+016
3.66898e+016
3.67337e+016
3.67791e+016
3.68263e+016
3.68754e+016
3.69266e+016
3.69803e+016
3.70365e+016
3.70957e+016
3.71581e+016
3.72241e+016
 3.7294e+016
3.73682e+016
3.74474e+016
3.75319e+016
3.76225e+016
3.77197e+016
3.78244e+016
3.79375e+016
3.80598e+016
3.81926e+016
3.83371e+016
3.84947e+016
3.86672e+016
3.88563e+016
3.90644e+016
3.92938e+016
3.95476e+016
 3.9829e+016
 4.0142e+016
4.04911e+016
4.08818e+016
4.13202e+016
4.18139e+016
4.23718e+016
4.30045e+016
4.37249e+016
4.45485e+016
4.54948e+016
4.65875e+016
4.78569e+016
4.93416e+016
5.10919e+016
5.31749e+016
5.56817e+016
5.87405e+016
6.25367e+016
6.73507e+016
7.36272e+016
8.21162e+016
9.41857e+016
1.12604e+017
1.43842e+017
2.06679e+017
3.65228e+017
 9.3211e+017
4.77034e+018
9.38357e+019
 9.9971e+019
9.99999e+019
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
9.99998e+019
9.99654e+019
9.27036e+019
3.88346e+018
3.30039e+017
3.08306e+016
2.91478e+015
2.76633e+014
2.63362e+013
2.51499e+012
2.40915e+011
2.31496e+010
2.23145e+009
2.15775e+008
2.09313e+007
2.03697e+006
      198874
     19480.1
     1914.42
     188.769
     18.6762
     1.85404
     0.18469
   0.0184617
  0.00185192
 0.000186428
1.88344e-005
 1.9097e-006
1.94342e-007
1.98508e-008
2.03523e-009
2.09458e-010
2.16396e-011
2.24434e-012
 2.3369e-013
2.44301e-014
 2.5643e-015
 2.7027e-016
2.86047e-017
3.04029e-018
3.24534e-019
3.47941e-020
  3.747e-021
4.05348e-022
4.40531e-023
4.81027e-024
5.27773e-025
 5.8191e-026
6.44828e-027
7.18227e-028
8.04201e-029
9.05337e-030
1.02485e-030
1.16673e-031
1.33601e-032
1.53899e-033
1.78363e-034
2.07999e-035
2.44087e-036
 2.8825e-037
3.42556e-038
4.09637e-039
4.92843e-040
5.96433e-041
7.25808e-042
8.87801e-043
1.09102e-043
1.34628e-044
1.66707e-045
2.07013e-046
2.57613e-047
3.21036e-048
4.00355e-049
4.99274e-050
6.22215e-051
7.74409e-052
9.61976e-053
1.19201e-053
1.47261e-054
1.81294e-055
2.22322e-056
2.71465e-057
3.29935e-058
3.99018e-059
4.80049e-060
5.74384e-061
6.83362e-062
8.08258e-063
9.50228e-064
1.11026e-064
1.28909e-065
1.48717e-066
1.70457e-067
1.94096e-068
2.19549e-069
2.46683e-070
2.75309e-071
3.05181e-072
3.35999e-073
3.67411e-074
3.99019e-075
4.30384e-076
4.61039e-077
4.90498e-078
5.18269e-079
5.43868e-080
5.66834e-081
5.86741e-082
6.03214e-083
6.15937e-084
6.24669e-085
6.29244e-086
6.29583e-087
6.25692e-088
6.17664e-089
6.05673e-090
5.89969e-091
5.70868e-092
5.48744e-093
5.24014e-094
4.97126e-095
4.68548e-096
4.38749e-097
4.08194e-098
3.77327e-099
3.46563e-100
 3.1628e-101
2.86815e-102
2.58454e-103
2.31435e-104
2.05946e-105
1.82125e-106
1.60063e-107
1.39807e-108
1.21366e-109
1.04715e-110
8.98009e-112
7.65457e-113
 6.4855e-114
5.46214e-115
 4.5729e-116
3.80577e-117
3.14867e-118
2.58977e-119
2.11766e-120
1.72156e-121
1.39148e-122
1.11822e-123
8.93495e-125
7.09871e-126
5.60793e-127
4.40528e-128
3.44117e-129
2.67308e-130
2.06491e-131
1.58631e-132
1.21195e-133
9.20875e-135
6.95905e-136
5.23051e-137
3.91015e-138
2.90744e-139
2.15034e-140
1.58195e-141
1.15766e-142
8.42718e-144
 6.1025e-145
 4.3961e-146
3.15046e-147
2.24615e-148
 1.5932e-149
1.12429e-150
7.89368e-152
5.51416e-153
3.83256e-154
2.65045e-155
1.82382e-156
1.24878e-157
8.50828e-159
5.76846e-160
3.89179e-161
2.61289e-162
1.74576e-163
1.16078e-164
7.68114e-166
5.05852e-167
3.31552e-168
2.16282e-169
1.40423e-170
9.07439e-172
5.83665e-173
3.73669e-174
2.38121e-175
1.51045e-176
9.53712e-178
5.99437e-179
3.75053e-180
  2.336e-181
1.44842e-182
8.94046e-184
5.49266e-185
3.35744e-186
2.59071e-187
""" 

data_str3 = """
3.67769181e-159 
7.97276720e-158 
1.79077648e-156
 3.99324959e-155
  8.83933196e-154
  1.94227962e-152
  4.23637836e-151
 9.17190709e-150
  1.97104975e-148
  4.20435668e-147
  8.90136094e-146
 1.87050513e-144
  3.90119481e-143
  8.07538240e-142
  1.65899710e-140
 3.38248160e-139
  6.84419889e-138
  1.37434923e-136
  2.73872665e-135
 5.41585505e-134
  1.06277579e-132
  2.06948326e-131
  3.99868365e-130
 7.66648184e-129
  1.45843819e-127
  2.75284375e-126
  5.15543503e-125
 9.57916702e-124
  1.76586350e-122
  3.22954686e-121
  5.85961503e-120
 1.05469624e-118
  1.88323338e-117
  3.33569829e-116
  5.86087578e-115
 1.02145323e-113
  1.76580026e-112
  3.02773941e-111
  5.14915264e-110
 8.68519805e-109
  1.45290263e-107
  2.41041632e-106
  3.96581188e-105
 6.47056483e-104
  1.04690587e-102
  1.67962969e-101
  2.67205146e-100
 4.21488890e-099
  6.59207198e-098
  1.02220140e-096
  1.57149756e-095
 2.39517598e-094
  3.61902128e-093
  5.42073422e-092
  8.04861933e-091
 1.18457818e-089
  1.72809518e-088
  2.49870756e-087
  3.58087391e-086
 5.08592757e-085
  7.15880107e-084
  9.98574685e-083
  1.38029467e-081
 1.89057820e-080
  2.56583856e-079
  3.45029180e-078
  4.59678080e-077
 6.06739927e-076
  7.93379875e-075
  1.02770459e-073
  1.31868864e-072
 1.67602733e-071
  2.10990274e-070
  2.63065308e-069
  3.24833979e-068
 3.97221372e-067
  4.81009015e-066
  5.76765213e-065
  6.84771250e-064
 8.04947526e-063
  9.36784666e-062
  1.07928530e-060
  1.23092258e-059
 1.38962129e-058
  1.55276674e-057
  1.71724541e-056
  1.87951913e-055
 2.03573271e-054
  2.18185184e-053
  2.31382561e-052
  2.42776534e-051
 2.52012929e-050
  2.58790147e-049
  2.62875229e-048
  2.64116929e-047
 2.62454797e-046
  2.57923517e-045
  2.50652104e-044
  2.40857934e-043
 2.28835978e-042
  2.14943984e-041
  1.99584648e-040
  1.83186026e-039
 1.66181516e-038
  1.48990756e-037
  1.32002597e-036
  1.15561111e-035
 9.99552869e-035
  8.54127268e-034
  7.20973415e-033
  6.01107289e-032
 4.94966907e-031
  4.02481757e-030
  3.23158520e-029
  2.56175116e-028
 2.00475707e-027
  1.54860479e-026
  1.18065490e-025
  8.88295202e-025
 6.59463783e-024
  4.83025508e-023
  3.49011458e-022
  2.48738853e-021
 1.74833426e-020
  1.21177924e-019
  8.28096093e-019
  5.57872279e-018
 3.70444270e-017
  2.42426915e-016
  1.56330226e-015
  9.93212164e-015
 6.21597518e-014
  3.83154798e-013
  2.32576018e-012
  1.38997646e-011
 8.17760664e-011
  4.73525975e-010
  2.69824193e-009
  1.51271171e-008
 8.34231050e-008
  4.52466096e-007
  2.41305772e-006
  1.26514880e-005
 6.51952105e-005
  3.30138045e-004
  1.64242078e-003
  8.02570009e-003
 3.85113858e-002
  1.81425576e-001
  8.38887448e-001
  3.80622583e+000
 1.69417403e+001
  7.39567896e+001
  3.16545043e+002
  1.32803076e+003
 5.45971999e+003
  2.19883872e+004
  8.67251175e+004
  3.34879988e+005
 1.26557238e+006
  4.67945600e+006
  1.69226261e+007
  5.98348017e+007
 2.06775743e+008
  6.98147361e+008
  2.30215594e+009
  7.41134553e+009
 2.32843913e+010
  7.13617275e+010
  2.13266193e+011
  6.21233680e+011
 1.76311709e+012
  4.87320152e+012
  1.31119059e+013
  3.43276756e+013
 8.74092019e+013
  2.16376419e+014
  5.20484769e+014
  1.21606577e+015
 2.75844283e+015
  6.07209074e+015
  1.29656181e+016
  2.68440363e+016
 5.38676957e+016
  1.04729976e+017
  1.97207716e+017
  3.59542731e+017
 6.34501691e+017
  1.08361501e+018
  1.79063959e+018
  2.86282521e+018
 4.42827445e+018
  6.62780759e+018
  9.60048645e+018
  1.34633694e+019
 1.82879555e+019
  2.40776170e+019
  3.07514180e+019
  3.81394188e+019
 4.59926161e+019
  5.40073839e+019
  6.18605812e+019
  6.92485820e+019
 7.59223830e+019
  8.17120445e+019
  8.65366306e+019
  9.03995135e+019
 9.33721924e+019
  9.55717255e+019
  9.71371748e+019
  9.82093604e+019
 9.89163850e+019
  9.93654983e+019
  9.96404573e+019
  9.98027923e+019
 9.98952700e+019
  9.99461323e+019
  9.99731560e+019
  9.99870344e+019
 9.99939279e+019
  9.99972416e+019
  9.99987839e+019
  9.99994795e+019
 9.99997836e+019
  9.99999126e+019
  9.99999657e+019
  9.99999869e+019
 9.99999951e+019
  9.99999982e+019
  9.99999994e+019
  9.99999998e+019
 9.99999999e+019
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  9.99999999e+019
  9.99999998e+019
  9.99999994e+019
 9.99999982e+019
  9.99999951e+019
  9.99999869e+019
  9.99999657e+019
 9.99999126e+019
  9.99997836e+019
  9.99994795e+019
  9.99987839e+019
 9.99972416e+019
  9.99939279e+019
  9.99870344e+019
  9.99731560e+019
 9.99461323e+019
  9.98952700e+019
  9.98027923e+019
  9.96404573e+019
 9.93654983e+019
  9.89163850e+019
  9.82093604e+019
  9.71371748e+019
 9.55717255e+019
  9.33721924e+019
  9.03995135e+019
  8.65366306e+019
 8.17120445e+019
  7.59223830e+019
  6.92485820e+019
  6.18605812e+019
 5.40073839e+019
  4.59926161e+019
  3.81394188e+019
  3.07514180e+019
 2.40776170e+019
  1.82879555e+019
  1.34633694e+019
  9.60048645e+018
 6.62780759e+018
  4.42827445e+018
  2.86282521e+018
  1.79063959e+018
 1.08361501e+018
  6.34501691e+017
  3.59542731e+017
  1.97207716e+017
 1.04729976e+017
  5.38676957e+016
  2.68440363e+016
  1.29656181e+016
 6.07209074e+015
  2.75844283e+015
  1.21606577e+015
  5.20484769e+014
 2.16376419e+014
  8.74092019e+013
  3.43276756e+013
  1.31119059e+013
 4.87320152e+012
  1.76311709e+012
  6.21233680e+011
  2.13266193e+011
 7.13617275e+010
  2.32843913e+010
  7.41134553e+009
  2.30215594e+009
 6.98147361e+008
  2.06775743e+008
  5.98348017e+007
  1.69226261e+007
 4.67945600e+006
  1.26557238e+006
  3.34879988e+005
  8.67251175e+004
 2.19883872e+004
  5.45971999e+003
  1.32803076e+003
  3.16545043e+002
 7.39567896e+001
  1.69417403e+001
  3.80622583e+000
  8.38887448e-001
 1.81425576e-001
  3.85113858e-002
  8.02570009e-003
  1.64242078e-003
 3.30138045e-004
  6.51952105e-005
  1.26514880e-005
  2.41305772e-006
 4.52466096e-007
  8.34231050e-008
  1.51271171e-008
  2.69824193e-009
 4.73525975e-010
  8.17760664e-011
  1.38997646e-011
  2.32576018e-012
 3.83154798e-013
  6.21597518e-014
  9.93212164e-015
  1.56330226e-015
 2.42426915e-016
  3.70444270e-017
  5.57872279e-018
  8.28096093e-019
 1.21177924e-019
  1.74833426e-020
  2.48738853e-021
  3.49011458e-022
 4.83025508e-023
  6.59463783e-024
  8.88295202e-025
  1.18065490e-025
 1.54860479e-026
  2.00475707e-027
  2.56175116e-028
  3.23158520e-029
 4.02481757e-030
  4.94966907e-031
  6.01107289e-032
  7.20973415e-033
 8.54127268e-034
  9.99552869e-035
  1.15561111e-035
  1.32002597e-036
 1.48990756e-037
  1.66181516e-038
  1.83186026e-039
  1.99584648e-040
 2.14943984e-041
  2.28835978e-042
  2.40857934e-043
  2.50652104e-044
 2.57923517e-045
  2.62454797e-046
  2.64116929e-047
  2.62875229e-048
 2.58790147e-049
  2.52012929e-050
  2.42776534e-051
  2.31382561e-052
 2.18185184e-053
  2.03573271e-054
  1.87951913e-055
  1.71724541e-056
 1.55276674e-057
  1.38962129e-058
  1.23092258e-059
  1.07928530e-060
 9.36784666e-062
  8.04947526e-063
  6.84771250e-064
  5.76765213e-065
 4.81009015e-066
  3.97221372e-067
  3.24833979e-068
  2.63065308e-069
 2.10990274e-070
  1.67602733e-071
  1.31868864e-072
  1.02770459e-073
 7.93379875e-075
  6.06739927e-076
  4.59678080e-077
  3.45029180e-078
 2.56583856e-079
  1.89057820e-080
  1.38029467e-081
  9.98574685e-083
 7.15880107e-084
  5.08592757e-085
  3.58087391e-086
  2.49870756e-087
 1.72809518e-088
  1.18457818e-089
  8.04861933e-091
  5.42073422e-092
 3.61902128e-093
  2.39517598e-094
  1.57149756e-095
  1.02220140e-096
 6.59207198e-098
  4.21488890e-099
  2.67205146e-100
  1.67962969e-101
 1.04690587e-102
  6.47056483e-104
  3.96581188e-105
  2.41041632e-106
 1.45290263e-107
  8.68519805e-109
  5.14915264e-110
  3.02773941e-111
 1.76580026e-112
  1.02145323e-113
  5.86087578e-115
  3.33569829e-116
 1.88323338e-117
  1.05469624e-118
  5.85961503e-120
  3.22954686e-121
 1.76586350e-122
  9.57916702e-124
  5.15543503e-125
  2.75284375e-126
 1.45843819e-127
  7.66648184e-129
  3.99868365e-130
  2.06948326e-131
 1.06277579e-132
  5.41585505e-134
  2.73872665e-135
  1.37434923e-136
 6.84419889e-138
  3.38248160e-139
  1.65899710e-140
  8.07538240e-142
 3.90119481e-143
  1.87050513e-144
  8.90136094e-146
  4.20435668e-147
 1.97104975e-148
  9.17190709e-150
  4.23637836e-151
  1.94227962e-152
 8.83933196e-154
  3.99324959e-155
  1.79077619e-156
  7.97209525e-158
 3.52341604e-159
  1.61298883e-160 
"""
# Convert the string data into a NumPy array
data = np.array([float(line) for line in data_str2.strip().splitlines()])

data2 = np.array([float(line) for line in data_str3.strip().splitlines()])
# Plot the data
#plt.figure(figsize=(10, 6))
plt.plot(data[50:350], label= "mydata")
plt.plot(data2[50:350], label="Diogo Data")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e12,1e21)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

#plt.sub
# Get current axes
ax = plt.gca()

# Add minor ticks
#ax.xaxis.set_minor_locator(AutoMinorLocator())
ax.yaxis.set_minor_locator(AutoMinorLocator())
ax.tick_params(axis='y', which='minor', length=4, width=1, color='gray')
plt.show()

err = []
for i in range(len(data)):
    err.append(abs(data[i] - data2[i]))

plt.plot(data, label= "mydata")
plt.plot(err, label= "error")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e1,1e21)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

plt.show()

err_perc = []
for i in range(len(data)):
    err_perc.append(abs(data[i] - data2[i]) / data2[i])

plt.plot(err_perc, label= "erro percentual")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e-5,1e5)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

plt.show()

"""
# Define times to look for (in seconds)
target_times = [0, 1.09067e-007, 4.95446e-007, 1.01406e-006, 2.25037e-006, 5.00491e-006, 7.50093e-006]
tolerance = 1e-7

filename = '../output 10 micro sec 9000s/e_dens.txt'


# Read file content
with open(filename, 'r') as file:
    content = file.read()

# Split by blocks
blocks = content.split('----')

times = []
data_blocks = []

for block in blocks:
    lines = block.strip().split('\n')
    #print(block)
    if len(lines) < 2:
        continue  # Skip if not enough lines

    # Extract time
    time_match = re.search(r'Time:\s*([0-9eE\+\-\.]+)', lines[0])
    print(time_match)
    if not time_match:
        continue

    time = float(time_match.group(1))

    # Parse data line (single line of numbers)
    try:
        data_line = lines[1]
        data = list(map(float, data_line.split()))
        times.append(time)
        data_blocks.append(data)
    except Exception as e:
        print(f"Error parsing data at time {time:.2e}: {e}")

# Convert to numpy arrays
times = np.array(times)
data_blocks = np.array(data_blocks, dtype=object)  # allow ragged arrays just in case

# Generate 102 values from 0 to 0.0003
x = np.linspace(0, 0.0003, 102)

# Plot values at requested times
for t in target_times:
    idx = np.where(np.abs(times - t) < tolerance)[0]
    if idx.size > 0:
        i = idx[0]
        plt.plot(x,data_blocks[i], label=f'Time = {times[i]:.2e} s')
    else:
        print(f"Time {t:.2e} s not found within tolerance.")

plt.xlabel("Z (m)")
plt.ylabel("m^-3")
plt.legend()
plt.title("electron density ")
plt.grid(True)
plt.show()

# File containing flux data
filename = '../output 10 micro sec 9000s/current_dens.txt'  # replace with your file path

# Initialize lists to store flux values
left_flux = []
right_flux = []

# Read the file
with open(filename, 'r') as file:
    for line in file:
        # Strip any extra spaces or newline characters
        line = line.strip()
        
        # Split the line into left and right flux values (separated by '|')
        flux_values = line.split('|')
        
        # Convert the flux values from string to float
        left_flux.append(float(flux_values[0].strip()))  # Left flux (particles/s)
        right_flux.append(float(flux_values[1].strip()))  # Right flux (particles/s)

# Convert flux data into numpy arrays for easier manipulation
left_flux = np.array(left_flux)
right_flux = np.array(right_flux)

left_flux = left_flux[1:]
right_flux = right_flux[1:]

# Compute net particle flux and current
net_flux = left_flux + right_flux  # sum left + right fluxes for each time step
current = net_flux  # Compute the current in amperes (A)

# Create time steps based on the number of flux values (you can adjust as needed)
time_steps = np.arange(1, len(left_flux) + 1)

# Plot all on the same graph
plt.figure(figsize=(10, 6))

# Plot Left flux
plt.plot(times[2:], left_flux, label='Left End Flux', color='blue')

# Plot Right flux
plt.plot(times[2:], right_flux, label='Right End Flux', color='red')

# Plot Current
plt.plot(times[2:], current, label='Current', color='purple')

# Add labels and title
plt.xlabel('Time (s))')
plt.ylabel('Current (A)')
plt.title('Current')

# Show the legend
plt.legend()

# Show the plot
plt.show()

# File containing potential and dt data
filename = '../output 10 micro sec 9000s/time_steps.txt'  # replace with your file path

# Initialize lists to store dt values
dt_values = []

# Read the file and extract dt values
with open(filename, 'r') as file:
    for line in file:
        # Strip any extra spaces or newline characters
        line = line.strip()
        
        # Extract the 'dt' value from the line using string splitting
        if 'dt' in line:
            # Split the line at 'dt' and take the second part, then extract the numerical value
            dt_value = line.split('dt:')[1].strip()
            dt_values.append(float(dt_value))

# Convert dt values into numpy array for easier manipulation
dt_values = np.array(dt_values)

# Create iteration numbers (1-based index for each time step)
iterations = np.arange(1, len(dt_values) + 1)

# Plot dt across iterations
plt.figure(figsize=(10, 6))
plt.plot(times[1:], dt_values, color='blue')

# Add labels and title
plt.xlabel('Iteration')
plt.ylabel('dt (seconds)')
plt.title('Time Step (dt)')

# Show the legend
plt.legend()

# Show the plot
plt.show()
"""