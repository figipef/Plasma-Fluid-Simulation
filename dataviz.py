import re
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator
# Paste your data here as a multiline string
data_str2 = """
 2.07267e+008
9.77741e+007
2.71928e+008
4.54017e+008
 8.1593e+008
1.43449e+009
2.51159e+009
4.36456e+009
7.53175e+009
 1.2904e+010
2.19478e+010
3.70552e+010
6.20946e+010
1.03266e+011
1.70414e+011
2.79031e+011
4.53251e+011
7.30315e+011
 1.1671e+012
1.84956e+012
2.90623e+012
4.52713e+012
6.99001e+012
1.06959e+013
1.62169e+013
2.43581e+013
3.62376e+013
5.33857e+013
7.78651e+013
1.12412e+014
1.60595e+014
2.26982e+014
3.17302e+014
4.38593e+014
5.99293e+014
8.09252e+014
1.07963e+015
1.42266e+015
1.85119e+015
2.37808e+015
3.01541e+015
3.77356e+015
 4.6602e+015
5.67943e+015
  6.831e+015
8.11003e+015
  9.507e+015
1.10084e+016
1.25983e+016
1.42363e+016
1.58361e+016
1.73722e+016
1.88294e+016
 2.0198e+016
2.14726e+016
2.26515e+016
2.37357e+016
2.47284e+016
 2.5634e+016
2.64581e+016
2.72064e+016
2.78852e+016
2.85004e+016
2.90579e+016
2.95632e+016
3.00214e+016
3.04373e+016
3.08151e+016
3.11589e+016
3.14722e+016
3.17581e+016
3.20196e+016
3.22591e+016
3.24789e+016
3.26811e+016
3.28675e+016
3.30396e+016
3.31989e+016
3.33467e+016
3.34842e+016
3.36122e+016
3.37318e+016
3.38436e+016
3.39486e+016
3.40472e+016
3.41401e+016
3.42277e+016
3.43106e+016
3.43892e+016
3.44638e+016
3.45348e+016
3.46025e+016
3.46672e+016
 3.4729e+016
3.47884e+016
3.48453e+016
3.49002e+016
 3.4953e+016
 3.5004e+016
3.50534e+016
3.51012e+016
3.51475e+016
3.51926e+016
3.52364e+016
3.52792e+016
3.53209e+016
3.53617e+016
3.54016e+016
3.54407e+016
3.54791e+016
3.55168e+016
3.55539e+016
3.55905e+016
3.56266e+016
3.56622e+016
3.56974e+016
3.57323e+016
3.57669e+016
3.58012e+016
3.58353e+016
3.58692e+016
3.59029e+016
3.59365e+016
3.59701e+016
3.60035e+016
 3.6037e+016
3.60705e+016
3.61039e+016
3.61374e+016
 3.6171e+016
3.62048e+016
3.62387e+016
3.62728e+016
3.63073e+016
3.63422e+016
3.63775e+016
3.64134e+016
3.64498e+016
 3.6487e+016
 3.6525e+016
3.65639e+016
3.66038e+016
3.66449e+016
3.66872e+016
3.67309e+016
3.67762e+016
3.68233e+016
3.68723e+016
3.69234e+016
3.69768e+016
3.70329e+016
3.70919e+016
3.71541e+016
3.72199e+016
3.72895e+016
3.73636e+016
3.74425e+016
3.75267e+016
 3.7617e+016
3.77139e+016
3.78182e+016
3.79309e+016
3.80528e+016
3.81851e+016
 3.8329e+016
3.84861e+016
3.86579e+016
3.88464e+016
3.90536e+016
3.92822e+016
 3.9535e+016
3.98153e+016
4.01271e+016
 4.0475e+016
4.08641e+016
 4.1301e+016
4.17929e+016
4.23487e+016
4.29792e+016
 4.3697e+016
4.45179e+016
4.54611e+016
4.65504e+016
 4.7816e+016
4.92965e+016
5.10421e+016
5.31199e+016
5.56209e+016
5.86731e+016
 6.2462e+016
6.72676e+016
7.35345e+016
8.20124e+016
9.40691e+016
1.12473e+017
1.43695e+017
2.06525e+017
3.65045e+017
9.31905e+017
4.77014e+018
9.38355e+019
9.99709e+019
9.99999e+019
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
      1e+020
9.99998e+019
9.99654e+019
9.27006e+019
3.88168e+018
 3.2945e+017
 3.0725e+016
2.89982e+015
2.74732e+014
2.61087e+013
2.48877e+012
2.37965e+011
2.28236e+010
2.19587e+009
2.11928e+008
2.05182e+007
1.99283e+006
      194176
     18981.2
     1861.55
     183.171
     18.0837
     1.79135
    0.178053
   0.0177587
  0.00177736
  0.00017851
1.79924e-005
1.81999e-006
1.84765e-007
1.88262e-008
1.92537e-009
1.97648e-010
2.03667e-011
2.10678e-012
 2.1878e-013
2.28092e-014
2.38753e-015
2.50929e-016
2.64814e-017
2.80637e-018
2.98671e-019
3.19238e-020
3.42722e-021
 3.6958e-022
4.00359e-023
4.35716e-024
4.76444e-025
  5.235e-026
5.78049e-027
6.41513e-028
7.15636e-029
8.02563e-030
9.04952e-031
 1.0261e-031
1.17013e-032
 1.3422e-033
 1.5488e-034
 1.7981e-035
2.10045e-036
2.46895e-037
2.92021e-038
3.47531e-039
4.16101e-040
5.01119e-041
 6.0687e-042
 7.3876e-043
9.03584e-044
1.10985e-044
1.36814e-045
1.69158e-046
 2.0963e-047
2.60203e-048
3.23267e-049
4.01698e-050
4.98923e-051
6.18987e-052
7.66616e-053
9.47272e-054
1.16719e-054
1.43341e-055
1.75375e-056
2.13678e-057
2.59176e-058
3.12848e-059
3.75708e-060
4.48784e-061
5.33087e-062
6.29577e-063
7.39118e-064
8.62441e-065
1.00009e-065
1.15238e-066
1.31933e-067
1.50065e-068
1.69569e-069
1.90337e-070
2.12222e-071
2.35035e-072
2.58544e-073
2.82479e-074
3.06533e-075
3.30371e-076
3.53638e-077
3.75962e-078
3.96971e-079
4.16298e-080
4.33593e-081
4.48536e-082
4.60846e-083
4.70285e-084
4.76675e-085
4.79895e-086
 4.7989e-087
4.76669e-088
4.70308e-089
4.60943e-090
4.48769e-091
4.34029e-092
 4.1701e-093
3.98032e-094
3.77438e-095
3.55582e-096
3.32823e-097
3.09513e-098
2.85989e-099
2.62564e-100
2.39525e-101
2.17125e-102
1.95579e-103
1.75067e-104
1.55728e-105
1.37665e-106
1.20945e-107
1.05602e-108
9.16406e-110
7.90408e-111
6.77601e-112
 5.7739e-113
4.89046e-114
4.11745e-115
3.44602e-116
2.86703e-117
2.37128e-118
1.94977e-119
1.59384e-120
1.29534e-121
1.04667e-122
8.40883e-124
6.71699e-125
5.33505e-126
4.21347e-127
3.30896e-128
2.58408e-129
2.00675e-130
1.54977e-131
1.19025e-132
9.09121e-134
  6.906e-135
5.21753e-136
3.92057e-137
2.93015e-138
2.17821e-139
 1.6106e-140
 1.1846e-141
 8.6667e-143
6.30742e-144
4.56641e-145
3.28877e-146
2.35635e-147
1.67959e-148
1.19107e-149
8.40331e-151
5.89866e-152
4.11962e-153
2.86268e-154
1.97929e-155
1.36169e-156
9.32158e-158
 6.3497e-159
4.30408e-160
2.90322e-161
1.94877e-162
1.30178e-163
8.65393e-165
5.72536e-166
3.76976e-167
2.47034e-168
1.61116e-169
1.04586e-170
6.75721e-172
 4.3454e-173
2.78145e-174
1.77215e-175
1.12389e-176
7.09506e-178
4.45863e-179
2.78914e-180
1.73689e-181
1.07675e-182
6.64511e-184
4.08176e-185
 2.4946e-186
1.92515e-187

""" 

data_str3 = """
3.67769181e-159 
7.97276720e-158 
1.79077648e-156
 3.99324959e-155
  8.83933196e-154
  1.94227962e-152
  4.23637836e-151
 9.17190709e-150
  1.97104975e-148
  4.20435668e-147
  8.90136094e-146
 1.87050513e-144
  3.90119481e-143
  8.07538240e-142
  1.65899710e-140
 3.38248160e-139
  6.84419889e-138
  1.37434923e-136
  2.73872665e-135
 5.41585505e-134
  1.06277579e-132
  2.06948326e-131
  3.99868365e-130
 7.66648184e-129
  1.45843819e-127
  2.75284375e-126
  5.15543503e-125
 9.57916702e-124
  1.76586350e-122
  3.22954686e-121
  5.85961503e-120
 1.05469624e-118
  1.88323338e-117
  3.33569829e-116
  5.86087578e-115
 1.02145323e-113
  1.76580026e-112
  3.02773941e-111
  5.14915264e-110
 8.68519805e-109
  1.45290263e-107
  2.41041632e-106
  3.96581188e-105
 6.47056483e-104
  1.04690587e-102
  1.67962969e-101
  2.67205146e-100
 4.21488890e-099
  6.59207198e-098
  1.02220140e-096
  1.57149756e-095
 2.39517598e-094
  3.61902128e-093
  5.42073422e-092
  8.04861933e-091
 1.18457818e-089
  1.72809518e-088
  2.49870756e-087
  3.58087391e-086
 5.08592757e-085
  7.15880107e-084
  9.98574685e-083
  1.38029467e-081
 1.89057820e-080
  2.56583856e-079
  3.45029180e-078
  4.59678080e-077
 6.06739927e-076
  7.93379875e-075
  1.02770459e-073
  1.31868864e-072
 1.67602733e-071
  2.10990274e-070
  2.63065308e-069
  3.24833979e-068
 3.97221372e-067
  4.81009015e-066
  5.76765213e-065
  6.84771250e-064
 8.04947526e-063
  9.36784666e-062
  1.07928530e-060
  1.23092258e-059
 1.38962129e-058
  1.55276674e-057
  1.71724541e-056
  1.87951913e-055
 2.03573271e-054
  2.18185184e-053
  2.31382561e-052
  2.42776534e-051
 2.52012929e-050
  2.58790147e-049
  2.62875229e-048
  2.64116929e-047
 2.62454797e-046
  2.57923517e-045
  2.50652104e-044
  2.40857934e-043
 2.28835978e-042
  2.14943984e-041
  1.99584648e-040
  1.83186026e-039
 1.66181516e-038
  1.48990756e-037
  1.32002597e-036
  1.15561111e-035
 9.99552869e-035
  8.54127268e-034
  7.20973415e-033
  6.01107289e-032
 4.94966907e-031
  4.02481757e-030
  3.23158520e-029
  2.56175116e-028
 2.00475707e-027
  1.54860479e-026
  1.18065490e-025
  8.88295202e-025
 6.59463783e-024
  4.83025508e-023
  3.49011458e-022
  2.48738853e-021
 1.74833426e-020
  1.21177924e-019
  8.28096093e-019
  5.57872279e-018
 3.70444270e-017
  2.42426915e-016
  1.56330226e-015
  9.93212164e-015
 6.21597518e-014
  3.83154798e-013
  2.32576018e-012
  1.38997646e-011
 8.17760664e-011
  4.73525975e-010
  2.69824193e-009
  1.51271171e-008
 8.34231050e-008
  4.52466096e-007
  2.41305772e-006
  1.26514880e-005
 6.51952105e-005
  3.30138045e-004
  1.64242078e-003
  8.02570009e-003
 3.85113858e-002
  1.81425576e-001
  8.38887448e-001
  3.80622583e+000
 1.69417403e+001
  7.39567896e+001
  3.16545043e+002
  1.32803076e+003
 5.45971999e+003
  2.19883872e+004
  8.67251175e+004
  3.34879988e+005
 1.26557238e+006
  4.67945600e+006
  1.69226261e+007
  5.98348017e+007
 2.06775743e+008
  6.98147361e+008
  2.30215594e+009
  7.41134553e+009
 2.32843913e+010
  7.13617275e+010
  2.13266193e+011
  6.21233680e+011
 1.76311709e+012
  4.87320152e+012
  1.31119059e+013
  3.43276756e+013
 8.74092019e+013
  2.16376419e+014
  5.20484769e+014
  1.21606577e+015
 2.75844283e+015
  6.07209074e+015
  1.29656181e+016
  2.68440363e+016
 5.38676957e+016
  1.04729976e+017
  1.97207716e+017
  3.59542731e+017
 6.34501691e+017
  1.08361501e+018
  1.79063959e+018
  2.86282521e+018
 4.42827445e+018
  6.62780759e+018
  9.60048645e+018
  1.34633694e+019
 1.82879555e+019
  2.40776170e+019
  3.07514180e+019
  3.81394188e+019
 4.59926161e+019
  5.40073839e+019
  6.18605812e+019
  6.92485820e+019
 7.59223830e+019
  8.17120445e+019
  8.65366306e+019
  9.03995135e+019
 9.33721924e+019
  9.55717255e+019
  9.71371748e+019
  9.82093604e+019
 9.89163850e+019
  9.93654983e+019
  9.96404573e+019
  9.98027923e+019
 9.98952700e+019
  9.99461323e+019
  9.99731560e+019
  9.99870344e+019
 9.99939279e+019
  9.99972416e+019
  9.99987839e+019
  9.99994795e+019
 9.99997836e+019
  9.99999126e+019
  9.99999657e+019
  9.99999869e+019
 9.99999951e+019
  9.99999982e+019
  9.99999994e+019
  9.99999998e+019
 9.99999999e+019
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  1.00000000e+020
  1.00000000e+020
  1.00000000e+020
 1.00000000e+020
  9.99999999e+019
  9.99999998e+019
  9.99999994e+019
 9.99999982e+019
  9.99999951e+019
  9.99999869e+019
  9.99999657e+019
 9.99999126e+019
  9.99997836e+019
  9.99994795e+019
  9.99987839e+019
 9.99972416e+019
  9.99939279e+019
  9.99870344e+019
  9.99731560e+019
 9.99461323e+019
  9.98952700e+019
  9.98027923e+019
  9.96404573e+019
 9.93654983e+019
  9.89163850e+019
  9.82093604e+019
  9.71371748e+019
 9.55717255e+019
  9.33721924e+019
  9.03995135e+019
  8.65366306e+019
 8.17120445e+019
  7.59223830e+019
  6.92485820e+019
  6.18605812e+019
 5.40073839e+019
  4.59926161e+019
  3.81394188e+019
  3.07514180e+019
 2.40776170e+019
  1.82879555e+019
  1.34633694e+019
  9.60048645e+018
 6.62780759e+018
  4.42827445e+018
  2.86282521e+018
  1.79063959e+018
 1.08361501e+018
  6.34501691e+017
  3.59542731e+017
  1.97207716e+017
 1.04729976e+017
  5.38676957e+016
  2.68440363e+016
  1.29656181e+016
 6.07209074e+015
  2.75844283e+015
  1.21606577e+015
  5.20484769e+014
 2.16376419e+014
  8.74092019e+013
  3.43276756e+013
  1.31119059e+013
 4.87320152e+012
  1.76311709e+012
  6.21233680e+011
  2.13266193e+011
 7.13617275e+010
  2.32843913e+010
  7.41134553e+009
  2.30215594e+009
 6.98147361e+008
  2.06775743e+008
  5.98348017e+007
  1.69226261e+007
 4.67945600e+006
  1.26557238e+006
  3.34879988e+005
  8.67251175e+004
 2.19883872e+004
  5.45971999e+003
  1.32803076e+003
  3.16545043e+002
 7.39567896e+001
  1.69417403e+001
  3.80622583e+000
  8.38887448e-001
 1.81425576e-001
  3.85113858e-002
  8.02570009e-003
  1.64242078e-003
 3.30138045e-004
  6.51952105e-005
  1.26514880e-005
  2.41305772e-006
 4.52466096e-007
  8.34231050e-008
  1.51271171e-008
  2.69824193e-009
 4.73525975e-010
  8.17760664e-011
  1.38997646e-011
  2.32576018e-012
 3.83154798e-013
  6.21597518e-014
  9.93212164e-015
  1.56330226e-015
 2.42426915e-016
  3.70444270e-017
  5.57872279e-018
  8.28096093e-019
 1.21177924e-019
  1.74833426e-020
  2.48738853e-021
  3.49011458e-022
 4.83025508e-023
  6.59463783e-024
  8.88295202e-025
  1.18065490e-025
 1.54860479e-026
  2.00475707e-027
  2.56175116e-028
  3.23158520e-029
 4.02481757e-030
  4.94966907e-031
  6.01107289e-032
  7.20973415e-033
 8.54127268e-034
  9.99552869e-035
  1.15561111e-035
  1.32002597e-036
 1.48990756e-037
  1.66181516e-038
  1.83186026e-039
  1.99584648e-040
 2.14943984e-041
  2.28835978e-042
  2.40857934e-043
  2.50652104e-044
 2.57923517e-045
  2.62454797e-046
  2.64116929e-047
  2.62875229e-048
 2.58790147e-049
  2.52012929e-050
  2.42776534e-051
  2.31382561e-052
 2.18185184e-053
  2.03573271e-054
  1.87951913e-055
  1.71724541e-056
 1.55276674e-057
  1.38962129e-058
  1.23092258e-059
  1.07928530e-060
 9.36784666e-062
  8.04947526e-063
  6.84771250e-064
  5.76765213e-065
 4.81009015e-066
  3.97221372e-067
  3.24833979e-068
  2.63065308e-069
 2.10990274e-070
  1.67602733e-071
  1.31868864e-072
  1.02770459e-073
 7.93379875e-075
  6.06739927e-076
  4.59678080e-077
  3.45029180e-078
 2.56583856e-079
  1.89057820e-080
  1.38029467e-081
  9.98574685e-083
 7.15880107e-084
  5.08592757e-085
  3.58087391e-086
  2.49870756e-087
 1.72809518e-088
  1.18457818e-089
  8.04861933e-091
  5.42073422e-092
 3.61902128e-093
  2.39517598e-094
  1.57149756e-095
  1.02220140e-096
 6.59207198e-098
  4.21488890e-099
  2.67205146e-100
  1.67962969e-101
 1.04690587e-102
  6.47056483e-104
  3.96581188e-105
  2.41041632e-106
 1.45290263e-107
  8.68519805e-109
  5.14915264e-110
  3.02773941e-111
 1.76580026e-112
  1.02145323e-113
  5.86087578e-115
  3.33569829e-116
 1.88323338e-117
  1.05469624e-118
  5.85961503e-120
  3.22954686e-121
 1.76586350e-122
  9.57916702e-124
  5.15543503e-125
  2.75284375e-126
 1.45843819e-127
  7.66648184e-129
  3.99868365e-130
  2.06948326e-131
 1.06277579e-132
  5.41585505e-134
  2.73872665e-135
  1.37434923e-136
 6.84419889e-138
  3.38248160e-139
  1.65899710e-140
  8.07538240e-142
 3.90119481e-143
  1.87050513e-144
  8.90136094e-146
  4.20435668e-147
 1.97104975e-148
  9.17190709e-150
  4.23637836e-151
  1.94227962e-152
 8.83933196e-154
  3.99324959e-155
  1.79077619e-156
  7.97209525e-158
 3.52341604e-159
  1.61298883e-160 
"""
# Convert the string data into a NumPy array
data = np.array([float(line) for line in data_str2.strip().splitlines()])

data2 = np.array([float(line) for line in data_str3.strip().splitlines()])
# Plot the data
#plt.figure(figsize=(10, 6))
plt.plot(data[50:350], label= "mydata")
plt.plot(data2[50:350], label="Diogo Data")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e12,1e21)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

#plt.sub
# Get current axes
ax = plt.gca()

# Add minor ticks
#ax.xaxis.set_minor_locator(AutoMinorLocator())
ax.yaxis.set_minor_locator(AutoMinorLocator())
ax.tick_params(axis='y', which='minor', length=4, width=1, color='gray')
plt.show()

err = []
for i in range(len(data)):
    err.append(abs(data[i] - data2[i]))

plt.plot(data, label= "mydata")
plt.plot(err, label= "error")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e1,1e21)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

plt.show()

err_perc = []
for i in range(len(data)):
    err_perc.append(abs(data[i] - data2[i]) / data2[i])

plt.plot(err_perc, label= "erro percentual")
plt.yscale('log')  # Optional: log scale to handle wide dynamic range
plt.ylim(1e-5,1e5)
plt.title("Data Visualization")
plt.xlabel("Index")
plt.ylabel("Density")
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.tight_layout()

plt.show()

"""
# Define times to look for (in seconds)
target_times = [0, 1.09067e-007, 4.95446e-007, 1.01406e-006, 2.25037e-006, 5.00491e-006, 7.50093e-006]
tolerance = 1e-7

filename = '../output 10 micro sec 9000s/e_dens.txt'


# Read file content
with open(filename, 'r') as file:
    content = file.read()

# Split by blocks
blocks = content.split('----')

times = []
data_blocks = []

for block in blocks:
    lines = block.strip().split('\n')
    #print(block)
    if len(lines) < 2:
        continue  # Skip if not enough lines

    # Extract time
    time_match = re.search(r'Time:\s*([0-9eE\+\-\.]+)', lines[0])
    print(time_match)
    if not time_match:
        continue

    time = float(time_match.group(1))

    # Parse data line (single line of numbers)
    try:
        data_line = lines[1]
        data = list(map(float, data_line.split()))
        times.append(time)
        data_blocks.append(data)
    except Exception as e:
        print(f"Error parsing data at time {time:.2e}: {e}")

# Convert to numpy arrays
times = np.array(times)
data_blocks = np.array(data_blocks, dtype=object)  # allow ragged arrays just in case

# Generate 102 values from 0 to 0.0003
x = np.linspace(0, 0.0003, 102)

# Plot values at requested times
for t in target_times:
    idx = np.where(np.abs(times - t) < tolerance)[0]
    if idx.size > 0:
        i = idx[0]
        plt.plot(x,data_blocks[i], label=f'Time = {times[i]:.2e} s')
    else:
        print(f"Time {t:.2e} s not found within tolerance.")

plt.xlabel("Z (m)")
plt.ylabel("m^-3")
plt.legend()
plt.title("electron density ")
plt.grid(True)
plt.show()

# File containing flux data
filename = '../output 10 micro sec 9000s/current_dens.txt'  # replace with your file path

# Initialize lists to store flux values
left_flux = []
right_flux = []

# Read the file
with open(filename, 'r') as file:
    for line in file:
        # Strip any extra spaces or newline characters
        line = line.strip()
        
        # Split the line into left and right flux values (separated by '|')
        flux_values = line.split('|')
        
        # Convert the flux values from string to float
        left_flux.append(float(flux_values[0].strip()))  # Left flux (particles/s)
        right_flux.append(float(flux_values[1].strip()))  # Right flux (particles/s)

# Convert flux data into numpy arrays for easier manipulation
left_flux = np.array(left_flux)
right_flux = np.array(right_flux)

left_flux = left_flux[1:]
right_flux = right_flux[1:]

# Compute net particle flux and current
net_flux = left_flux + right_flux  # sum left + right fluxes for each time step
current = net_flux  # Compute the current in amperes (A)

# Create time steps based on the number of flux values (you can adjust as needed)
time_steps = np.arange(1, len(left_flux) + 1)

# Plot all on the same graph
plt.figure(figsize=(10, 6))

# Plot Left flux
plt.plot(times[2:], left_flux, label='Left End Flux', color='blue')

# Plot Right flux
plt.plot(times[2:], right_flux, label='Right End Flux', color='red')

# Plot Current
plt.plot(times[2:], current, label='Current', color='purple')

# Add labels and title
plt.xlabel('Time (s))')
plt.ylabel('Current (A)')
plt.title('Current')

# Show the legend
plt.legend()

# Show the plot
plt.show()

# File containing potential and dt data
filename = '../output 10 micro sec 9000s/time_steps.txt'  # replace with your file path

# Initialize lists to store dt values
dt_values = []

# Read the file and extract dt values
with open(filename, 'r') as file:
    for line in file:
        # Strip any extra spaces or newline characters
        line = line.strip()
        
        # Extract the 'dt' value from the line using string splitting
        if 'dt' in line:
            # Split the line at 'dt' and take the second part, then extract the numerical value
            dt_value = line.split('dt:')[1].strip()
            dt_values.append(float(dt_value))

# Convert dt values into numpy array for easier manipulation
dt_values = np.array(dt_values)

# Create iteration numbers (1-based index for each time step)
iterations = np.arange(1, len(dt_values) + 1)

# Plot dt across iterations
plt.figure(figsize=(10, 6))
plt.plot(times[1:], dt_values, color='blue')

# Add labels and title
plt.xlabel('Iteration')
plt.ylabel('dt (seconds)')
plt.title('Time Step (dt)')

# Show the legend
plt.legend()

# Show the plot
plt.show()
"""